apply plugin: "org.owasp.dependencycheck"
apply plugin: "org.sonarqube"
apply from: "$rootDir/build.utils.gradle"
apply from: "$rootDir/dotenv.gradle"

buildscript {
  ext.kotlin_version = Versions.kotlin

  repositories {
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.4.0'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
    classpath "org.jacoco:org.jacoco.core:${Versions.jacoco}"
    classpath "com.google.gms:google-services:${Versions.google_services}"
    classpath "io.fabric.tools:gradle:${Versions.fabric}"
    classpath "org.owasp:dependency-check-gradle:${Versions.owasp_dependency_check}"
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${Versions.sonar}"
    classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${Versions.detekt}"
    classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${Versions.coveralls}"
    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${Versions.navigation}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

loadEnvs()

allprojects {
  repositories {
    google()
    jcenter()
  }

  apply plugin: 'jacoco'

  tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "utf-8"
    options.incremental = true
    options.fork = true
  }

  tasks.withType(Test) {
    if (project.hasProperty("test.reports.skip")) {
      reports.html.enabled = true
      reports.junitXml.enabled = true
    }

    jacoco.includeNoLocationClasses = true

    testLogging {
      exceptionFormat "full"
      showExceptions true
      showCauses true
      showStackTraces true
      maxParallelForks BuildUtils.cores
      forkEvery 10
      events = ["failed", "passed", "skipped", "standardOut", "standardError"]
    }
  }
}

subprojects {
  setPreDex(it)

  apply from: "$rootDir/tools/ktlint.gradle"
  apply from: "$rootDir/tools/detek.gradle"

  afterEvaluate { Project project ->
    project.tasks.whenTaskAdded {
      if (it.name == "testReleaseUnitTest") {
        it.enabled = false
      }
    }

    if (isAndroidModule(project)) {
      android {
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }

        compileSdkVersion 28

        defaultConfig {
          minSdkVersion 21
          targetSdkVersion 28

          /*
           Modify VERSION_CODE and VERSION_NAME files in project
           root directory to application versionCode and versionName configuration.

           In release builds, these values will be changed using the values contained
           in VERSION_CODE and VERSION_NAME files.
           */
          versionCode 1
          versionName "1.0"

          vectorDrawables.useSupportLibrary true
        }

        sourceSets {
          main.java.srcDirs += 'src/main/kotlin'
          debug.java.srcDirs += 'src/debug/kotlin'
          release.java.srcDirs += 'src/release/kotlin'
          test.java.srcDirs += 'src/test/kotlin'
          androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }

        buildTypes { debug { testCoverageEnabled = true } }

        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'

          reportDir "$rootDir/reports/test_reports"
          resultsDir "$rootDir/reports/test_results"

          animationsDisabled true

          unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
          }
        }

        configurations.all {
          resolutionStrategy {
            force "com.google.code.findbugs:jsr305:${Versions.findbugs_jsr305}"
            force "androidx.fragment:fragment:${Versions.fragments}"
            force "com.google.auto.value:auto-value-annotations:${Versions.autoValueAnnotations}"
          }
        }
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
